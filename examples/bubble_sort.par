dec BubbleSort : [List<Nat>] List<Nat>
def BubbleSort = [list] chan yield {
  let yield: dual List<Nat> = list.unfounded.case {
    .end! => yield,
    .item(first) tail => do {
      let (head, last)! = BubbleSortStep(first, tail)
      let yield = head.loop
      yield.item(last)
    } in yield
  }
  yield.end!
}

dec BubbleSortStep : [Nat, List<Nat>] (List<Nat>, Nat)!
def BubbleSortStep = [first, tail] tail.begin.case {
  .end! => (.end!, first)!
  .item(second) tail => do {
    let (list_first, first)! = Sort2(first, second)
    let (between, last)! = tail.loop
  } in (.item(list_first) between, last)!
}

dec Sort2 : [Nat, Nat] (Nat, Nat)!
def Sort2 = [n1, n2] Nat.Compare(n1, n2).case {
    .less! => (n1, n2)!,
    .equal! => (n1, n2)!,
    .greater! => (n2, n1)!,
  }
