type Seq<a> = iterative choice {
  .close => !
  .next  => (a) self
}

dec Fibonacci : Seq<Nat>
def Fibonacci =
  let (a) b = (0) 1
  in begin case {
    .close => !
    .next =>
      let (a) b = (b) Nat.Add(a, b)
      in (a) loop
  }

dec NthFib : [Nat] Nat
def NthFib = [n]
  let fib = Fibonacci
  in Nat.Repeat(n).begin.case {
    .end!   => do { fib.next[x].close? } in x,
    .step s => do { fib.next[_] } in s.loop,
  }
