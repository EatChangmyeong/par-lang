type Sequence<a> = iterative choice {
  .close => !
  .next  => (a) self
}

dec Fibonacci : Sequence<Nat>
def Fibonacci =
  let (a) b = (0) 1
  in begin case {
    .close => !
    .next =>
      let (a) b = (b) Nat.Add(a, b)
      in (a) loop
  }

dec NthFib : [Nat] Nat
def NthFib = [n]
  let fib = Fibonacci
  in Nat.Repeat(n).begin.case {
    .end!   => do { fib.next[x].close? } in x,
    .step s => do { fib.next[_] } in s.loop,
  }

def Program: ! = do {
  let console = Console.Open
  let fib = Fibonacci

  Nat.Repeat(30).begin.case {
    .end! => {}
    .step remaining => {
      fib.next[n]
      console.print(Nat.ToString(n))
      remaining.loop
    }
  }

  fib.close
  console.close
} in !

def TestNthFibZero: ! =
  Test.Assert(Nat.Equals(NthFib(0), 1))

def TestNthFibOne: ! =
  Test.Assert(Nat.Equals(NthFib(1), 1))

def TestNthFibTwo: ! =
  Test.Assert(Nat.Equals(NthFib(2), 2))

def TestNthFibThree: ! =
  Test.Assert(Nat.Equals(NthFib(3), 3))

def TestNthFibFour: ! =
  Test.Assert(Nat.Equals(NthFib(4), 5))

def TestNthFibFive: ! =
  Test.Assert(Nat.Equals(NthFib(5), 8))

def TestNthFibSix: ! =
  Test.Assert(Nat.Equals(NthFib(6), 13))

def TestNthFibTen: ! =
  Test.Assert(Nat.Equals(NthFib(10), 89))
