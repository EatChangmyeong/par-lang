type Builder = iterative choice {
  .add(String) => self,
  .build => String,
}

type Reader = recursive iterative/attempt choice {
  .close => !,
  .remainder => String,
  .match(Pattern, Pattern) => either {
    .empty!,
    .fail self/attempt,
    .match(String, String) self,
  },
  .matchEnd(Pattern, Pattern) => either {
    .empty!,
    .fail self/attempt,
    .match(String, String)!,
  }
}

type Pattern = recursive either {
  .e!,
  .s(String) self,
  .one(Char.Class) self,
  .non(Char.Class) self,
  .length(Nat.Nat) self,
  .repeat(self) self,
  .repeat1(self) self,
  .times(Nat.Nat, self) self,
  .and(self, self) self,
  .or(self, self) self,
}
