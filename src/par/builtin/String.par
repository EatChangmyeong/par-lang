type Builder = iterative choice {
  .add(String) => self,
  .build => String,
}

type Reader<e> = recursive iterative/attempt choice {
  .close => !,
  .remainder => Result.Result<String.String, e>,
  .char => either {
    .end Result.Result<!, e>,
    .char(Char.Char) self,
  },
  .match(Pattern, Pattern) => either {
    .end Result.Result<!, e>,
    .fail self/attempt,
    .match(String, String) self,
  },
  .matchEnd(Pattern, Pattern) => either {
    .end Result.Result<!, e>,
    .fail self/attempt,
    .match(String, String)!,
  },
}

type Pattern = recursive either {
  .empty!,
  .str String,
  .one Char.Class,
  .non Char.Class,
  .length Nat.Nat,
  .repeat self,
  .repeat1 self,
  .concat List.List<self>,
  .and List.List<self>,
  .or List.List<self>,
}
