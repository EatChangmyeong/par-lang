type Builder = iterative choice {
  .add(String) => self,
  .build => String,
}

type Reader = recursive either {
  .empty!,
  .some iterative/attempt choice {
    .close => !,
    .remainder => String,
    .char => (Char.Char) self,
    .match(Pattern) => either {
      .fail self/attempt,
      .match(String) self,
    },
  }
}

type Pattern = recursive either {
  .e!,
  .s(String) self,
  .length(Nat.Nat) self,
  .repeat(self) self,
  .repeat1(self) self,
  .times(Nat.Nat, self) self,
  .and(self, self) self,
  .or(self, self) self,
}
