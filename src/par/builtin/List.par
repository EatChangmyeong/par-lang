type List<a> = recursive either {
  .end!,
  .item(a) self,
}

type Builder<a> = iterative choice {
  .add(a) => self,
  .build => List<a>,
}

dec Builder : [type a] Builder<a>
def Builder = [type a]
  let append: [List<a>] List<a> = [xs] xs
  in begin case {
    .add(x) =>
      let append: [List<a>] List<a>
        = [xs] append(.item(x) xs)
      in loop,
    .build => append(.end!),
  }
